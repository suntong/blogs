<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Easygen on Sfxpt Blog</title>
    <link>https://suntong.github.io/blogs/tags/easygen/</link>
    <description>Recent content in Easygen on Sfxpt Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2016 22:13:12 -0500</lastBuildDate>
    <atom:link href="https://suntong.github.io/blogs/tags/easygen/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Easygen - Easy to use universal code/text generator</title>
      <link>https://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator</link>
      <pubDate>Fri, 01 Jan 2016 22:13:12 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator</guid>
      <description>

&lt;!--
# Easygen - Easy to use universal code/text generator
[category Tech][tags go,programming,easygen,CLI]
--&gt;

&lt;p&gt;The focus today is &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;, a universal code/text generator that is easy to use.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dt&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-transformation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Data transformation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love &lt;a href=&#34;https://en.wikipedia.org/wiki/LaTeX&#34;&gt;LaTeX&lt;/a&gt;, because I love the &lt;em&gt;concept&lt;/em&gt; of it, over the &lt;a href=&#34;http://acronyms.thefreedictionary.com/WYGIWYS&#34;&gt;WYGIWYS&lt;/a&gt; one, because in LaTeX, you describe things in terms of &lt;em&gt;what they are&lt;/em&gt;, instead of &lt;em&gt;how they look&lt;/em&gt;. Thus, you can change their look to whatever you want later at a single point, without going all over the places to change each one of them. Moreover, with this &lt;em&gt;single source&lt;/em&gt;, you can transform it into different presentation formats, be it &lt;code&gt;.ps&lt;/code&gt;, &lt;code&gt;.pdf&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, or even &lt;code&gt;.rtf&lt;/code&gt;. That&amp;rsquo;s the power of &lt;em&gt;separating the data definition and data presentation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Talking about &lt;em&gt;data transformation&lt;/em&gt;, we all know that &lt;a href=&#34;https://en.wikipedia.org/wiki/XSLT&#34;&gt;XSLT&lt;/a&gt; is used for transforming data defined in XML format into other formats or even documents. It&amp;rsquo;s a really good concept, but the reason that it never really takes off, I believe, is that it is really too cumbersome to use. I use &lt;a href=&#34;http://xmlstar.sourceforge.net/&#34;&gt;xmlstarlet&lt;/a&gt; instead to transform/convert my XML data. It is far more convenient than XSLT on the data presentation side; but still, on the data definition side, I still have to use XML, which is still not very convenient. Things will get far worse if the XML namespace is involved &amp;ndash; it&amp;rsquo;d be quite a struggle for me to get things right eventually.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;efdt&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;easygen-for-data-transformation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Easygen for data transformation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Welcome to the world of &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;, in which
data are defined far more conveniently (in &lt;a href=&#34;www.yaml.org/refcard.html&#34;&gt;YAML&lt;/a&gt; format); and the data transformation/presentation is far far more powerful (powered by &lt;a href=&#34;https://goo.gl/dz7yih&#34;&gt;Go Template&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;first-example:499476dd6f3e653703da63e222c1c5fc&#34;&gt;First example&lt;/h3&gt;

&lt;p&gt;A simplest YAML example to define a list of colors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Colors:
  - red
  - blue
  - white
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simply template to present them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The colors are: {{range .Colors}}{{.}}, {{end}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e., no-sweat to throw in a loop, piece of cake. The result is as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen test/list0 
The colors are: red, blue, white, .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the same data source, you can choose either the text template or the HTML template as the presentation format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ easygen test/list1
The quoted colors are: &amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;white&amp;quot;, .

$ easygen -html test/list1
The quoted colors are: &amp;amp;#34;red&amp;amp;#34;, &amp;amp;#34;blue&amp;amp;#34;, &amp;amp;#34;white&amp;amp;#34;, .

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, HTML specific elements ARE being taken care of, if you want them to.&lt;/p&gt;

&lt;h3 id=&#34;the-power-of-go-template:499476dd6f3e653703da63e222c1c5fc&#34;&gt;The power of Go template&lt;/h3&gt;

&lt;p&gt;Now onto the real power of Go template &amp;ndash; the comma after &amp;ldquo;white&amp;rdquo; and before the ending period looks ugly, let&amp;rsquo;s remove it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen test/listfunc1 
red, blue, white.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See? It&amp;rsquo;s gone. Now, how is that done? Simple, the data source is still the same, the template is now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $i, $color := .Colors}}{{$color}}{{if lt $i ($.Colors | len | minus1)}}, {{end}}{{end}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simple template showcases Go template&amp;rsquo;s power of,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy looping&lt;/li&gt;
&lt;li&gt;use of built-in functions&lt;/li&gt;
&lt;li&gt;use of custom defined function which is not in Go Template&lt;/li&gt;
&lt;li&gt;and use &lt;code&gt;if/else&lt;/code&gt; for conditional output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yet, this has only touch a tip of the iceberg of &lt;a href=&#34;https://goo.gl/dz7yih&#34;&gt;Go Template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;cg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-generation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Code generation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really found of code auto-generation. I&amp;rsquo;ve been using a tool called GSL for that purpose for more than 10 years. If anything is &lt;em&gt;structurally repetitive&lt;/em&gt;, I&amp;rsquo;ll use GSL to auto-generate them for me. Commandline processing is a very good example. Take a look at the following sample, you will notice lots of repetitive things:&lt;/p&gt;

&lt;p&gt;The help text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hd2usb $ $Revision: 1.1 $

Root FS from HD to USB

Usage: hd2usb [OPTIONS]...

  -t, --max=n      max of sub-task execution level  (default=all)
  -b, --min=n      min of sub-task execution level  (default=`0&#39;)
  
      --exclude=f  use the provided exclude file instead of default

other options:
  
  -v, --verbose    be verbose, show commands run
  -n, --no-exec    no execution, only show commands to run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shell commandline processing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -*- shell-script -*-
  
#
# shell script &#39;hd2usb&#39; command line parameters processing
#
# hd2usb $ $Revision: 1.1 $
#
# Root FS from HD to USB
#
  
eval set -- `getopt \
  -o +t:b:vn --long \
    max:,min:,exclude:,verbose,no-exec \
  -- &amp;quot;$@&amp;quot;`
  
_opt_min=&amp;quot;0&amp;quot;
  
while :; do
  case &amp;quot;$1&amp;quot; in
  --max|-t)            # max of sub-task execution level  (default=all)
    shift; _opt_max=&amp;quot;$1&amp;quot;
    ;;
  --min|-b)            # min of sub-task execution level
    shift; _opt_min=&amp;quot;$1&amp;quot;
    ;;
  # 
  --exclude)           # use the provided exclude file instead of default
    shift; _opt_exclude=&amp;quot;$1&amp;quot;
    ;;
  
  # == other options
  --verbose|-v)        # be verbose, show commands run
    if [ &amp;quot;$_opt_verbose&amp;quot; ]; then _opt_verbose=`expr $_opt_verbose + 1`
    else _opt_verbose=1; fi
    VERBOSE=T
    ;;
  --no-exec|-n)        # no execution, only show commands to run
    _opt_no_exec=T
    NO_EXEC=&#39; -n&#39;
    ;;
  --) 
    shift; break 
    ;;
  *) 
    prog_abort &amp;quot;Internal getopt error ($1)!&amp;quot; 1
    ;;
  esac
  shift
done
  
[ &amp;quot;$_opt_debug&amp;quot; ] &amp;amp;&amp;amp; {
  echo &amp;quot;[hd2usb] debug: _opt_max=$_opt_max&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_min=$_opt_min&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_exclude=$_opt_exclude&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_verbose=$_opt_verbose&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_no_exec=$_opt_no_exec&amp;quot;
}
  
#if [ &amp;quot;$_opt_check_failed&amp;quot; ]; then 
#  echo &amp;quot;Not all mandatory options are set.&amp;quot;
#fi
 
# End
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of those repetitive things are duplicated in two places, it&amp;rsquo;ll be a maintenance nightmare to keep them both in sync, if they are not coming from a common single source.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://grml.org/&#34;&gt;Grml&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://grml.org/grml-debootstrap/&#34;&gt;grml-debootstrap(8)&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/grml/grml-debootstrap/blob/master/cmdlineopts.clp&#34;&gt;command line parameter-processing&lt;/a&gt; was initially based on my automatic generated script. The problem is that I wasn&amp;rsquo;t able to open-source my code-generation script because GSL was release with a free for personal use commercial license. The newer version is now GPL, but it has loads of problems, no backward compatibility, and my script doesn&amp;rsquo;t work there. Besides, the help text is automatic generated by &lt;code&gt;gengetopt&lt;/code&gt;, but it&amp;rsquo;s configuration file is really awkward (so I auto-generate that as well), and it has not been actively maintained for quite long.&lt;/p&gt;

&lt;p&gt;Thus, for years I&amp;rsquo;ve been looking for alternatives, and I&amp;rsquo;ve finally settled, with &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;. Let&amp;rsquo;s see how easy for it to do code generation, e.g. how it can help command line parameter handling for Go code.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;efcg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;easygen-for-code-generation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Easygen for code generation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my earlier article on &lt;a href=&#34;https://sfxpt.wordpress.com/2015/06/25/viper-go-configuration-with-fangs/&#34;&gt;viper&lt;/a&gt;, there lists an example using &lt;code&gt;viper&lt;/code&gt; and &lt;code&gt;cobra&lt;/code&gt; together for configuration and command line parameter handling. If you take a closer look at the code,  from the repetitive structural code, we can extract the driving data into the following YAML definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat test/commandlineCVFull.yaml
CmdMain: mainCmd
CmdPrefix: DISPATCH

Options:
  - Name: debug
    Type: Bool
    Value: false
    Usage: Turn on debugging.

  - Name: addr
    Type: String
    Value: &#39;&amp;quot;localhost:5002&amp;quot;&#39;
    Usage: Address of the service.

  - Name: smtp-addr
    Type: String
    Value: &#39;&amp;quot;localhost:25&amp;quot;&#39;
    Usage: Address of the SMTP server.

  - Name: smtp-user
    Type: String
    Value: &#39;&amp;quot;&amp;quot;&#39;
    Usage: User for the SMTP server.

  - Name: smtp-password
    Type: String
    Value: &#39;&amp;quot;&amp;quot;&#39;
    Usage: Password for the SMTP server.

  - Name: email-from
    Type: String
    Value: &#39;&amp;quot;noreply@abc.com&amp;quot;&#39;
    Usage: The from email address.

ConfigName: CommandLineCV

ConfigPath:
  - /tmp
  - .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that&amp;rsquo;s done, with the help of &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCVFull.tmpl&#34;&gt;&lt;code&gt;commandlineCVFull.tmpl&lt;/code&gt;&lt;/a&gt; template, auto code generation is a breeze:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$ easygen test/commandlineCVFull 
func init() {

  viper.SetEnvPrefix(&amp;quot;DISPATCH&amp;quot;)
  viper.AutomaticEnv()

  /*

    When AutomaticEnv called, Viper will check for an environment variable any
    time a viper.Get request is made. It will apply the following rules. It
    will check for a environment variable with a name matching the key
    uppercased and prefixed with the EnvPrefix if set.

  */

  flags := mainCmd.Flags()

  flags.Bool(&amp;quot;debug&amp;quot;, false, &amp;quot;Turn on debugging.&amp;quot;)
  viper.BindPFlag(&amp;quot;debug&amp;quot;, flags.Lookup(&amp;quot;debug&amp;quot;))

  flags.String(&amp;quot;addr&amp;quot;, &amp;quot;localhost:5002&amp;quot;, &amp;quot;Address of the service.&amp;quot;)
  viper.BindPFlag(&amp;quot;addr&amp;quot;, flags.Lookup(&amp;quot;addr&amp;quot;))

  flags.String(&amp;quot;smtp-addr&amp;quot;, &amp;quot;localhost:25&amp;quot;, &amp;quot;Address of the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-addr&amp;quot;, flags.Lookup(&amp;quot;smtp-addr&amp;quot;))

  flags.String(&amp;quot;smtp-user&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;User for the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-user&amp;quot;, flags.Lookup(&amp;quot;smtp-user&amp;quot;))

  flags.String(&amp;quot;smtp-password&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Password for the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-password&amp;quot;, flags.Lookup(&amp;quot;smtp-password&amp;quot;))

  flags.String(&amp;quot;email-from&amp;quot;, &amp;quot;noreply@abc.com&amp;quot;, &amp;quot;The from email address.&amp;quot;)
  viper.BindPFlag(&amp;quot;email-from&amp;quot;, flags.Lookup(&amp;quot;email-from&amp;quot;))

  // Viper supports reading from yaml, toml and/or json files. Viper can
  // search multiple paths. Paths will be searched in the order they are
  // provided. Searches stopped once Config File found.

  viper.SetConfigName(&amp;quot;CommandLineCV&amp;quot;) // name of config file (without extension)

  viper.AddConfigPath(&amp;quot;/tmp&amp;quot;)
  viper.AddConfigPath(&amp;quot;.&amp;quot;)

  err := viper.ReadInConfig()
  if err != nil {
    println(&amp;quot;No config file found. Using built-in defaults.&amp;quot;)
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Done! Furthermore, the code looks really like handcrafted, instead of being automatically generated.&lt;/p&gt;

&lt;p&gt;(FTR, I used space in my Go template because the &lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/9jKexxD19Js/1hhnfmD5ckAJ&#34;&gt;tabs were giving me headaches when putting the results into automatic testing&lt;/a&gt;. You can surely use tabs in your Go template, that&amp;rsquo;s not a problem at all, I was even able to make one work for Go automatic testing. Check out the &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCV.yaml&#34;&gt;previous example&lt;/a&gt;, &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCV.tmpl&#34;&gt;commandlineCV&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for today. Happy hacking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating GPT partitions easily on the command line</title>
      <link>https://suntong.github.io/blogs/2015/12/26/creating-gpt-partitions-easily-on-the-command-line</link>
      <pubDate>Sat, 26 Dec 2015 00:04:56 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2015/12/26/creating-gpt-partitions-easily-on-the-command-line</guid>
      <description>

&lt;!--
[category Tech][tags Debian,Ubuntu,Linux,partition,GPT,go,easygen,CLI]
--&gt;

&lt;h2 id=&#34;incentives:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;Incentives&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve long been enjoying using &lt;code&gt;sfdisk&lt;/code&gt; to manipulate my disk partitions. I always use it to,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xpt.sourceforge.net/techdocs/nix/disk/general/disk01-PartitionTools/index.html#cmd_sfdisk&#34;&gt;change the boot device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xpt.sourceforge.net/techdocs/nix/disk/general/disk01-PartitionTools/index.html#save_restore_disk_partition_setting_and_fix_errors_using_sfdisk&#34;&gt;save/restore disk partition setting and fix errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or even, &lt;a href=&#34;https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks&#34;&gt;create disk partitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When my disks are over 2T in size, I can&amp;rsquo;t use MBR and therefore can&amp;rsquo;t use &lt;code&gt;sfdisk&lt;/code&gt; anymore. I have to use GPT instead. My first GPT partitions was created using GUI tools, but I really hate GUI tools. So this time when I need to partition GPT again, I look for the command line alternative instead.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;problem&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-problem:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a command line tool, &lt;code&gt;sgdisk&lt;/code&gt;, to create GPT partitions, but its command line interface is inhuman, if not insane. Here is the example given by the &lt;code&gt;sgdisk&lt;/code&gt; author, from &lt;a href=&#34;http://www.rodsbooks.com/gdisk/sgdisk-walkthrough.html&#34;&gt;Creating Scripts for Partition Manipulation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
sgdisk -og $1
sgdisk -n 1:2048:4095 -c 1:&amp;quot;BIOS Boot Partition&amp;quot; -t 1:ef02 $1
sgdisk -n 2:4096:413695 -c 2:&amp;quot;EFI System Partition&amp;quot; -t 2:ef00 $1
sgdisk -n 3:413696:823295 -c 3:&amp;quot;Linux /boot&amp;quot; -t 3:8300 $1
ENDSECTOR=`sgdisk -E $1`
sgdisk -n 4:823296:$ENDSECTOR -c 4:&amp;quot;Linux LVM&amp;quot; -t 4:8e00 $1
sgdisk -p $1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the comparison, to &lt;a href=&#34;https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks&#34;&gt;create disk partitions using &lt;code&gt;sfdisk&lt;/code&gt;&lt;/a&gt;, here are two examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Three primary partitions: two of size 50MB and the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,50
,50
;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A 1MB OS2 Boot Manager partition, a 50MB DOS partition,
and three extended partitions (DOS D:, Linux swap, Linux):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,1,a
,50,6
,,E
;
,20,4
,16,S
;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, it is so simple. Coming from the simple &lt;code&gt;sfdisk&lt;/code&gt; and landed at the complicated &lt;code&gt;sgdisk&lt;/code&gt;, on looking at the above example, I realize that there is no way I can write the above &lt;code&gt;sgdisk&lt;/code&gt; code by hand, i.e., I need a tool to write it for me. Of course, the first tool that came into mind is the &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;universal code generator, easygen&lt;/a&gt;. After poking around here and there, I &lt;a href=&#34;https://github.com/suntong/easygen/commit/8b223d1f20993feb6acfde2bf40a10033eb728d5&#34;&gt;made it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;solution&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-solution:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The solution&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So to use the &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;universal code generator, easygen&lt;/a&gt; to create GPT partitions, first we need to define our partitions layout in an easy format as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Disk: /dev/sdb

# Common Partitions Types
#
# 8300 Linux filesystem
# 8200 linux swap
# fd00 linux raid
# ef02 BIOS boot
# 0700 Microsoft basic data
#
# For more GPT Partitions Types,
# echo L | gdisk /dev/sdb

Partitions:
  - Name: bios_boot
    Type: ef02
    Size: +200M

  - Name: linux_boot
    Type: 8300
    Size: +20G

  - Name: windows
    Type: &amp;quot;0700&amp;quot;
    Size: +30G

  - Name: linux_swap
    Type: 8200
    Size: +10G

  - Name: os1
    Type: 8300
    Size: +12G

  - Name: os2
    Type: 8300
    Size: +12G

  - Name: os3
    Type: 8300
    Size: +12G

  - Name: data
    Type: 8300
    Size: &amp;quot;0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e., for each partition, we need to give its name, type and size. For your convenient, I&amp;rsquo;ve put the mostly used GPT types in the comment, as shown above.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the hardest part, the rest are simple and straightforward, to generate partition creation code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;easygen test/sgdisk | tee test/sgdisk.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; # format /dev/sdb as GPT, GUID Partition Table
 sgdisk -Z /dev/sdb

 sgdisk -n 0:0:+200M -t 0:ef02 -c 0:&amp;quot;bios_boot&amp;quot; /dev/sdb
 sgdisk -n 0:0:+20G -t 0:8300 -c 0:&amp;quot;linux_boot&amp;quot; /dev/sdb
 sgdisk -n 0:0:+30G -t 0:0700 -c 0:&amp;quot;windows&amp;quot; /dev/sdb
 sgdisk -n 0:0:+10G -t 0:8200 -c 0:&amp;quot;linux_swap&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os1&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os2&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os3&amp;quot; /dev/sdb
 sgdisk -n 0:0:0 -t 0:8300 -c 0:&amp;quot;data&amp;quot; /dev/sdb

 sgdisk -p /dev/sdb

 # inform the OS of partition table changes
 partprobe /dev/sdb
 fdisk -l /dev/sdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After carefully read &lt;a href=&#34;http://www.rodsbooks.com/gdisk/sgdisk.html&#34;&gt;&lt;code&gt;sgdisk&lt;/code&gt;&amp;rsquo;s man page&lt;/a&gt;, I found it is not that insane or inhuman, but just powerful after all.&lt;/p&gt;

&lt;p&gt;The result will be exactly as we are expecting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sgdisk -p /dev/sdb
Disk /dev/sdb: 732558336 sectors, 2.7 TiB
Logical sector size: 4096 bytes
Disk identifier (GUID): C4426321-9726-4022-BB20-2EF00B490465
Partition table holds up to 128 entries
First usable sector is 6, last usable sector is 732558330
Partitions will be aligned on 256-sector boundaries
Total free space is 250 sectors (1000.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1             256           51455   200.0 MiB   EF02  bios_boot
   2           51456         5294335   20.0 GiB    8300  linux_boot
   3         5294336        13158655   30.0 GiB    0700  windows
   4        13158656        15780095   10.0 GiB    8200  linux_swap
   5        15780096        18925823   12.0 GiB    8300  os1
   6        18925824        22071551   12.0 GiB    8300  os2
   7        22071552        25217279   12.0 GiB    8300  os3
   8        25217280       732558330   2.6 TiB     8300  data

$ fdisk -l /dev/sdb

Disk /dev/sdb: 2.7 TiB, 3000558944256 bytes, 732558336 sectors
Units: sectors of 1 * 4096 = 4096 bytes
Sector size (logical/physical): 4096 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: C4426321-9726-4022-BB20-2EF00B490465

Device        Start       End   Sectors  Size Type
/dev/sdb1       256     51455     51200  200M BIOS boot
/dev/sdb2     51456   5294335   5242880   20G Linux filesystem
/dev/sdb3   5294336  13158655   7864320   30G Microsoft basic data
/dev/sdb4  13158656  15780095   2621440   10G Linux swap
/dev/sdb5  15780096  18925823   3145728   12G Linux filesystem
/dev/sdb6  18925824  22071551   3145728   12G Linux filesystem
/dev/sdb7  22071552  25217279   3145728   12G Linux filesystem
/dev/sdb8  25217280 732558330 707341051  2.7T Linux filesystem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;gui_vs_cli&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;is-it-better:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;Is it better?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know most GUI lovers would laugh at my &lt;em&gt;silly&lt;/em&gt; action. I just know them so well that I can imagine exactly what the conversion would be, as follows (&lt;strong&gt;T&lt;/strong&gt; stands for &amp;ldquo;they&amp;rdquo;, whereas &lt;strong&gt;M&lt;/strong&gt; stands for me):&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;&amp;ldquo;Ha, you are making this more complicated&amp;rdquo;&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;No, I think I&amp;rsquo;m making it simpler. For example, the data definition (&lt;code&gt;.yaml&lt;/code&gt;) file not only serves the purpose of generating the partition-creation code, but also serves the purpose of documentation as well.&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;You are just kidding me, the best way to document is to take a screenshot&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;Well, I disagree. What if you want to do it again?&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;That&amp;rsquo;s so simple. I just need to find out where I store my screenshot, and I can easily redo it again&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;From the GUI, doing the clicking all over again?&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;Definitely. Who want to learn or use your silly way?&lt;/em&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Oh, well, my tools is definitely not for them, no matter how hard I&amp;rsquo;d like to try. I think that it is the mentality conflicting between the two camps, the Microsoft spoiled dummies, and die-hard text-everything Unix fans. Personally, I view WYSIWYG GUI tools as carving stones with chisels, and text-based/command-line tools as operating CNC machines. Yes, sure there are strict rules and steep learning curves regarding the CNC machines, but once you are over that fear and hurdle, the benefits or possibilities are endless.&lt;/p&gt;

&lt;p&gt;Talking about partition creation, let alone doing it again on a different machine, even on the same machine, I need to do it several times, because nobody can achieve the perfect score with a single shot without any prior practices. I can&amp;rsquo;t. Doing the clicking over and over again will wear me out very fast, and I most probably would end up with a less optimal setting that I&amp;rsquo;ll be regretting since. Using the &lt;code&gt;.yaml&lt;/code&gt; file and code generation, it&amp;rsquo;ll be nearly &amp;ldquo;zero cost&amp;rdquo;, I can do it over and over again until I&amp;rsquo;m fully satisfied.&lt;/p&gt;

&lt;p&gt;Let alone doing it several times, even just doing it once can be simplified by the &lt;code&gt;.yaml&lt;/code&gt; file as well. Here is a piece of my actual GPT partition definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  - Name: os1p
    Type: 8300
    Size: +12G

  - Name: os1s
    Type: 8300
    Size: +12G

  - Name: os11
    Type: 8300
    Size: +8G

  - Name: os12
    Type: 8300
    Size: +8G

  - Name: os13
    Type: 8300
    Size: +8G

  - Name: os2p
    Type: 8300
    Size: +12G

  - Name: os2s
    Type: 8300
    Size: +12G

  - Name: os21
    Type: 8300
    Size: +8G

  - Name: os22
    Type: 8300
    Size: +8G

  - Name: os23
    Type: 8300
    Size: +8G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d like to keep a lot of OS partitions for me to try new things or keeping the old systems so that I can go back to them any time. In the above listing, I have two sets of OS partitions, &lt;code&gt;os1x&lt;/code&gt; and &lt;code&gt;os2x&lt;/code&gt;, each with two big partitions (12G), primary and secondary, and three smaller partitions (8G). Using a text editor, I can quickly duplicate the first entry into the first full set, then into both the two sets, without too much trouble. Doing from GUI, not a single chiseling I can save. Err, I meant clicking.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;advantages&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-advantages:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The advantages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.yaml&lt;/code&gt; file and code generation will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serve both the purpose of action and documentation.&lt;/li&gt;
&lt;li&gt;make it very simple to redo/reuse, regardless to different machines, or to the same machines; many times, or just once.&lt;/li&gt;
&lt;li&gt;give me a clearer content. Instead of the exact &lt;code&gt;sgdisk&lt;/code&gt; commands, i.e., the implementation details, the file contains only each partition&amp;rsquo;s name, type and size. Clear and straight to the point. No trivial details are in the way.&lt;/li&gt;
&lt;li&gt;of course, it also gives the benefit of coding and documenting at the same place. More reasons can be documented in the &lt;code&gt;.yaml&lt;/code&gt; file, the same way as comments make code-purpose clearer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the bonus, once the data definition (&lt;code&gt;.yaml&lt;/code&gt;) file is in place, you can do all sorts of other things you want.&lt;/p&gt;

&lt;p&gt;E.g., how about managing the mount-points?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen -tf test/sgdisk-mp test/sgdisk

 mkdir /mnt/bios_boot
 mkdir /mnt/linux_boot
 mkdir /mnt/windows
 mkdir /mnt/linux_swap
 mkdir /mnt/os1
 mkdir /mnt/os2
 mkdir /mnt/os3
 mkdir /mnt/data


 mount LABEL=bios_boot /mnt/bios_boot
 mount LABEL=linux_boot /mnt/linux_boot
 mount LABEL=windows /mnt/windows
 mount LABEL=linux_swap /mnt/linux_swap
 mount LABEL=os1 /mnt/os1
 mount LABEL=os2 /mnt/os2
 mount LABEL=os3 /mnt/os3
 mount LABEL=data /mnt/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generating the &lt;code&gt;fstab&lt;/code&gt; entries are as simple as above as well. Or, how about using &lt;code&gt;mkfs&lt;/code&gt; to format each partition? Simple as well.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;&lt;a href=&#34;http://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator/&#34;&gt;ll explain more&lt;/a&gt; on &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;the easy to use universal code/text generator easygen&lt;/a&gt; next. Meanwhile, you can check out what we have &lt;a href=&#34;https://github.com/suntong001/blog/blob/master/GoOptP7-easygen.md&#34;&gt;covered&lt;/a&gt; already  &lt;a href=&#34;https://sfxpt.wordpress.com/2015/07/04/easygen-is-now-coding-itself/&#34;&gt;before&lt;/a&gt;, including &lt;a href=&#34;https://sfxpt.wordpress.com/2015/07/10/easygen-for-mock-up/&#34;&gt;mock-up generation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>