<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sfxpt Blog</title>
    <link>https://suntong.github.io/blogs/post/</link>
    <description>Recent content in Posts on Sfxpt Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Feb 2016 00:07:33 -0500</lastBuildDate>
    <atom:link href="https://suntong.github.io/blogs/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GoDoc from branch code</title>
      <link>https://suntong.github.io/blogs/2016/02/26/godoc-from-branch-code</link>
      <pubDate>Fri, 26 Feb 2016 00:07:33 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2016/02/26/godoc-from-branch-code</guid>
      <description>&lt;!--
# GoDoc from branch code

[category Tech][tags go,programming]
--&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;GoDoc&lt;/a&gt; does not support documenting branch code, because &lt;code&gt;go get&lt;/code&gt; Does Not Work That Way&lt;sup&gt;TM&lt;/sup&gt;. However, I do need to check the GoDoc result before messing with my git head. Solution?&lt;/p&gt;

&lt;p&gt;I found one from &lt;a href=&#34;https://npf.io/2015/06/wip-godoc/&#34;&gt;Sharing Godoc of a WIP Branch&lt;/a&gt;, but it described in such a abstracted way that makes my first several attempts failed. So I&amp;rsquo;m documenting (the same thing) again in my own more-helpful but &lt;a href=&#34;http://suntong.github.io/blogs/2016/02/20/the-no-sugar-style/&#34;&gt;no-sugar&lt;/a&gt; style.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tag the branch you are working on. Note, to make it works, you have to tag it in the format of vN (e.g. v0, v1, v1.1.1, etc).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   git tag v0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Publish your new tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   git push origin v0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check your published new tag. For my &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;&lt;code&gt;easygen&lt;/code&gt;&lt;/a&gt; project, I checked&lt;br /&gt;
&lt;a href=&#34;https://github.com/suntong/easygen/releases/tag/v0&#34;&gt;https://github.com/suntong/easygen/releases/tag/v0&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visit your new tagged branch from GoDoc via &lt;a href=&#34;https://gopkg.in&#34;&gt;gopkg.in&lt;/a&gt;. Again, for my &lt;code&gt;easygen&lt;/code&gt; project, with &lt;code&gt;v0&lt;/code&gt; tag, I visited &lt;a href=&#34;https://godoc.org/gopkg.in/suntong/easygen.v0&#34;&gt;https://godoc.org/gopkg.in/suntong/easygen.v0&lt;/a&gt;. Replace the &lt;em&gt;GithubUser&lt;/em&gt;,  &lt;em&gt;repo&lt;/em&gt; and tag names with your for your case of course.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You will see you branch code (document) rendered properly on GoDoc.&lt;/p&gt;

&lt;p&gt;BTW, the tag can easily be removed later (and reused if needed):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -d v0
git push origin :refs/tags/v0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>The &#34;no-sugar&#34; style</title>
      <link>https://suntong.github.io/blogs/2016/02/20/the-no-sugar-style</link>
      <pubDate>Sat, 20 Feb 2016 23:53:53 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2016/02/20/the-no-sugar-style</guid>
      <description>

&lt;!--
# The &#34;no-sugar&#34; style
[category Tech][tags writing]
--&gt;

&lt;h2 id=&#34;situation:c52adce59b6d37a917783c66f4c083db&#34;&gt;Situation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m the person who like concise, and don&amp;rsquo;t like the literature style stuffing in lots of irrelevant information to distract you from the main idea. So when I read a book called &lt;em&gt;&amp;ldquo;No bullshit Java&amp;rdquo;&lt;/em&gt;, I know that&amp;rsquo;s exactly the kind of writing style I prefer, both reading and writing.&lt;/p&gt;

&lt;p&gt;However, that &lt;em&gt;&amp;ldquo;No bullshit&amp;rdquo;&lt;/em&gt; is kind of stronger than my tolerance. Is there a better phrase that can convey the idea that I don&amp;rsquo;t like those &amp;ldquo;bullshit&amp;rdquo;, but not as strong?&lt;/p&gt;

&lt;p&gt;Example usage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I read a very useful blog, but there are so many distraction there that it is very easy to miss a step. So I&amp;rsquo;m documenting it again in my (no-)____ style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I want something more vivid than &amp;ldquo;concise&amp;rdquo; (or &amp;ldquo;distilled&amp;rdquo;), but not as colorful as &amp;ldquo;no bullshit&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;consideration:c52adce59b6d37a917783c66f4c083db&#34;&gt;Consideration&lt;/h2&gt;

&lt;p&gt;For the situation like above, &lt;a href=&#34;http://ell.stackexchange.com/questions/82118&#34;&gt;most people would think&lt;/a&gt; that &amp;ldquo;&lt;em&gt;no nonsense&lt;/em&gt;&amp;rdquo; is the best phrase to describe it. However, I&amp;rsquo;m still hesitate to use it for the above blog-rewriting case, because if I use it, it&amp;rsquo;d imply the other blogger has lots of &amp;ldquo;&lt;em&gt;nonsense&lt;/em&gt;&amp;rdquo; in his/her blog. That&amp;rsquo;s not what I really meant. Many people like to expose their &amp;ldquo;life long&amp;rdquo; stories before they start talking business. That&amp;rsquo;s their style. Although I really don&amp;rsquo;t like that, I wouldn&amp;rsquo;t call them &amp;ldquo;&lt;em&gt;nonsense&lt;/em&gt;&amp;rdquo; for &lt;em&gt;their&lt;/em&gt; blogs (but will do for mine).&lt;/p&gt;

&lt;h2 id=&#34;my-choice:c52adce59b6d37a917783c66f4c083db&#34;&gt;My Choice&lt;/h2&gt;

&lt;p&gt;Now, what&amp;rsquo;s my final choice?&lt;/p&gt;

&lt;p&gt;First, let me precisely define what I&amp;rsquo;m trying to do (or describe) &amp;ndash; I want to leave out any &lt;em&gt;frivolous&lt;/em&gt; distraction from my writing. The &lt;a href=&#34;http://www.oxforddictionaries.com/us/definition/english/frivolous&#34;&gt;number one meaning of frivolous from OED&lt;/a&gt; is &amp;ldquo;&lt;em&gt;not having any serious purpose or value&lt;/em&gt;&amp;rdquo;. Those are the things I want to eliminate, so that my writing can be &lt;em&gt;succinct&lt;/em&gt;, meaning &amp;ldquo;briefly and clearly expressed, especially of something written or spoken&amp;rdquo; &lt;a href=&#34;http://www.oxforddictionaries.com/us/definition/english/succinct&#34;&gt;from OED&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If I&amp;rsquo;m purely talking about my writing, I will surely to use &amp;ldquo;&lt;em&gt;no nonsense&lt;/em&gt;&amp;rdquo; to describe it.&lt;/li&gt;
&lt;li&gt;However, if I&amp;rsquo;m talking about condensing another article, which has many frivolous distractions, into succinct writing, I&amp;rsquo;ll call it &lt;strong&gt;&lt;em&gt;&amp;ldquo;no-sugar&amp;rdquo;&lt;/em&gt;&lt;/strong&gt; style rewrite, because there is another person involved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The phrase &lt;em&gt;&amp;ldquo;no-sugar&amp;rdquo;&lt;/em&gt; has a computer technical meaning of no-frivolous these days &lt;a href=&#34;http://ell.stackexchange.com/a/82120/5857&#34;&gt;among a small population&lt;/a&gt;. Although it is still not widely heard/known, I hope it can get accepted by a broader audience. Thus I&amp;rsquo;m promoting the phrase now, because this the least condescending and most neutral way to describe it. Just like the coffee, no-sugar means just the coffee, nothing else! I like the expression.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easygen - Easy to use universal code/text generator</title>
      <link>https://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator</link>
      <pubDate>Fri, 01 Jan 2016 22:13:12 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator</guid>
      <description>

&lt;!--
# Easygen - Easy to use universal code/text generator
[category Tech][tags go,programming,easygen,CLI]
--&gt;

&lt;p&gt;The focus today is &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;, a universal code/text generator that is easy to use.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;dt&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-transformation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Data transformation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love &lt;a href=&#34;https://en.wikipedia.org/wiki/LaTeX&#34;&gt;LaTeX&lt;/a&gt;, because I love the &lt;em&gt;concept&lt;/em&gt; of it, over the &lt;a href=&#34;http://acronyms.thefreedictionary.com/WYGIWYS&#34;&gt;WYGIWYS&lt;/a&gt; one, because in LaTeX, you describe things in terms of &lt;em&gt;what they are&lt;/em&gt;, instead of &lt;em&gt;how they look&lt;/em&gt;. Thus, you can change their look to whatever you want later at a single point, without going all over the places to change each one of them. Moreover, with this &lt;em&gt;single source&lt;/em&gt;, you can transform it into different presentation formats, be it &lt;code&gt;.ps&lt;/code&gt;, &lt;code&gt;.pdf&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt;, or even &lt;code&gt;.rtf&lt;/code&gt;. That&amp;rsquo;s the power of &lt;em&gt;separating the data definition and data presentation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Talking about &lt;em&gt;data transformation&lt;/em&gt;, we all know that &lt;a href=&#34;https://en.wikipedia.org/wiki/XSLT&#34;&gt;XSLT&lt;/a&gt; is used for transforming data defined in XML format into other formats or even documents. It&amp;rsquo;s a really good concept, but the reason that it never really takes off, I believe, is that it is really too cumbersome to use. I use &lt;a href=&#34;http://xmlstar.sourceforge.net/&#34;&gt;xmlstarlet&lt;/a&gt; instead to transform/convert my XML data. It is far more convenient than XSLT on the data presentation side; but still, on the data definition side, I still have to use XML, which is still not very convenient. Things will get far worse if the XML namespace is involved &amp;ndash; it&amp;rsquo;d be quite a struggle for me to get things right eventually.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;efdt&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;easygen-for-data-transformation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Easygen for data transformation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Welcome to the world of &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;, in which
data are defined far more conveniently (in &lt;a href=&#34;www.yaml.org/refcard.html&#34;&gt;YAML&lt;/a&gt; format); and the data transformation/presentation is far far more powerful (powered by &lt;a href=&#34;https://goo.gl/dz7yih&#34;&gt;Go Template&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&#34;first-example:499476dd6f3e653703da63e222c1c5fc&#34;&gt;First example&lt;/h3&gt;

&lt;p&gt;A simplest YAML example to define a list of colors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Colors:
  - red
  - blue
  - white
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simply template to present them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The colors are: {{range .Colors}}{{.}}, {{end}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e., no-sweat to throw in a loop, piece of cake. The result is as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen test/list0 
The colors are: red, blue, white, .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the same data source, you can choose either the text template or the HTML template as the presentation format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ easygen test/list1
The quoted colors are: &amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;, &amp;quot;white&amp;quot;, .

$ easygen -html test/list1
The quoted colors are: &amp;amp;#34;red&amp;amp;#34;, &amp;amp;#34;blue&amp;amp;#34;, &amp;amp;#34;white&amp;amp;#34;, .

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, HTML specific elements ARE being taken care of, if you want them to.&lt;/p&gt;

&lt;h3 id=&#34;the-power-of-go-template:499476dd6f3e653703da63e222c1c5fc&#34;&gt;The power of Go template&lt;/h3&gt;

&lt;p&gt;Now onto the real power of Go template &amp;ndash; the comma after &amp;ldquo;white&amp;rdquo; and before the ending period looks ugly, let&amp;rsquo;s remove it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen test/listfunc1 
red, blue, white.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See? It&amp;rsquo;s gone. Now, how is that done? Simple, the data source is still the same, the template is now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $i, $color := .Colors}}{{$color}}{{if lt $i ($.Colors | len | minus1)}}, {{end}}{{end}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This simple template showcases Go template&amp;rsquo;s power of,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy looping&lt;/li&gt;
&lt;li&gt;use of built-in functions&lt;/li&gt;
&lt;li&gt;use of custom defined function which is not in Go Template&lt;/li&gt;
&lt;li&gt;and use &lt;code&gt;if/else&lt;/code&gt; for conditional output&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yet, this has only touch a tip of the iceberg of &lt;a href=&#34;https://goo.gl/dz7yih&#34;&gt;Go Template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;cg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-generation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Code generation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m really found of code auto-generation. I&amp;rsquo;ve been using a tool called GSL for that purpose for more than 10 years. If anything is &lt;em&gt;structurally repetitive&lt;/em&gt;, I&amp;rsquo;ll use GSL to auto-generate them for me. Commandline processing is a very good example. Take a look at the following sample, you will notice lots of repetitive things:&lt;/p&gt;

&lt;p&gt;The help text:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hd2usb $ $Revision: 1.1 $

Root FS from HD to USB

Usage: hd2usb [OPTIONS]...

  -t, --max=n      max of sub-task execution level  (default=all)
  -b, --min=n      min of sub-task execution level  (default=`0&#39;)
  
      --exclude=f  use the provided exclude file instead of default

other options:
  
  -v, --verbose    be verbose, show commands run
  -n, --no-exec    no execution, only show commands to run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The shell commandline processing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# -*- shell-script -*-
  
#
# shell script &#39;hd2usb&#39; command line parameters processing
#
# hd2usb $ $Revision: 1.1 $
#
# Root FS from HD to USB
#
  
eval set -- `getopt \
  -o +t:b:vn --long \
    max:,min:,exclude:,verbose,no-exec \
  -- &amp;quot;$@&amp;quot;`
  
_opt_min=&amp;quot;0&amp;quot;
  
while :; do
  case &amp;quot;$1&amp;quot; in
  --max|-t)            # max of sub-task execution level  (default=all)
    shift; _opt_max=&amp;quot;$1&amp;quot;
    ;;
  --min|-b)            # min of sub-task execution level
    shift; _opt_min=&amp;quot;$1&amp;quot;
    ;;
  # 
  --exclude)           # use the provided exclude file instead of default
    shift; _opt_exclude=&amp;quot;$1&amp;quot;
    ;;
  
  # == other options
  --verbose|-v)        # be verbose, show commands run
    if [ &amp;quot;$_opt_verbose&amp;quot; ]; then _opt_verbose=`expr $_opt_verbose + 1`
    else _opt_verbose=1; fi
    VERBOSE=T
    ;;
  --no-exec|-n)        # no execution, only show commands to run
    _opt_no_exec=T
    NO_EXEC=&#39; -n&#39;
    ;;
  --) 
    shift; break 
    ;;
  *) 
    prog_abort &amp;quot;Internal getopt error ($1)!&amp;quot; 1
    ;;
  esac
  shift
done
  
[ &amp;quot;$_opt_debug&amp;quot; ] &amp;amp;&amp;amp; {
  echo &amp;quot;[hd2usb] debug: _opt_max=$_opt_max&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_min=$_opt_min&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_exclude=$_opt_exclude&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_verbose=$_opt_verbose&amp;quot;
  echo &amp;quot;[hd2usb] debug: _opt_no_exec=$_opt_no_exec&amp;quot;
}
  
#if [ &amp;quot;$_opt_check_failed&amp;quot; ]; then 
#  echo &amp;quot;Not all mandatory options are set.&amp;quot;
#fi
 
# End
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of those repetitive things are duplicated in two places, it&amp;rsquo;ll be a maintenance nightmare to keep them both in sync, if they are not coming from a common single source.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://grml.org/&#34;&gt;Grml&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://grml.org/grml-debootstrap/&#34;&gt;grml-debootstrap(8)&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/grml/grml-debootstrap/blob/master/cmdlineopts.clp&#34;&gt;command line parameter-processing&lt;/a&gt; was initially based on my automatic generated script. The problem is that I wasn&amp;rsquo;t able to open-source my code-generation script because GSL was release with a free for personal use commercial license. The newer version is now GPL, but it has loads of problems, no backward compatibility, and my script doesn&amp;rsquo;t work there. Besides, the help text is automatic generated by &lt;code&gt;gengetopt&lt;/code&gt;, but it&amp;rsquo;s configuration file is really awkward (so I auto-generate that as well), and it has not been actively maintained for quite long.&lt;/p&gt;

&lt;p&gt;Thus, for years I&amp;rsquo;ve been looking for alternatives, and I&amp;rsquo;ve finally settled, with &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;easygen&lt;/a&gt;. Let&amp;rsquo;s see how easy for it to do code generation, e.g. how it can help command line parameter handling for Go code.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;efcg&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;easygen-for-code-generation:499476dd6f3e653703da63e222c1c5fc&#34;&gt;Easygen for code generation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my earlier article on &lt;a href=&#34;https://sfxpt.wordpress.com/2015/06/25/viper-go-configuration-with-fangs/&#34;&gt;viper&lt;/a&gt;, there lists an example using &lt;code&gt;viper&lt;/code&gt; and &lt;code&gt;cobra&lt;/code&gt; together for configuration and command line parameter handling. If you take a closer look at the code,  from the repetitive structural code, we can extract the driving data into the following YAML definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat test/commandlineCVFull.yaml
CmdMain: mainCmd
CmdPrefix: DISPATCH

Options:
  - Name: debug
    Type: Bool
    Value: false
    Usage: Turn on debugging.

  - Name: addr
    Type: String
    Value: &#39;&amp;quot;localhost:5002&amp;quot;&#39;
    Usage: Address of the service.

  - Name: smtp-addr
    Type: String
    Value: &#39;&amp;quot;localhost:25&amp;quot;&#39;
    Usage: Address of the SMTP server.

  - Name: smtp-user
    Type: String
    Value: &#39;&amp;quot;&amp;quot;&#39;
    Usage: User for the SMTP server.

  - Name: smtp-password
    Type: String
    Value: &#39;&amp;quot;&amp;quot;&#39;
    Usage: Password for the SMTP server.

  - Name: email-from
    Type: String
    Value: &#39;&amp;quot;noreply@abc.com&amp;quot;&#39;
    Usage: The from email address.

ConfigName: CommandLineCV

ConfigPath:
  - /tmp
  - .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that&amp;rsquo;s done, with the help of &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCVFull.tmpl&#34;&gt;&lt;code&gt;commandlineCVFull.tmpl&lt;/code&gt;&lt;/a&gt; template, auto code generation is a breeze:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;$ easygen test/commandlineCVFull 
func init() {

  viper.SetEnvPrefix(&amp;quot;DISPATCH&amp;quot;)
  viper.AutomaticEnv()

  /*

    When AutomaticEnv called, Viper will check for an environment variable any
    time a viper.Get request is made. It will apply the following rules. It
    will check for a environment variable with a name matching the key
    uppercased and prefixed with the EnvPrefix if set.

  */

  flags := mainCmd.Flags()

  flags.Bool(&amp;quot;debug&amp;quot;, false, &amp;quot;Turn on debugging.&amp;quot;)
  viper.BindPFlag(&amp;quot;debug&amp;quot;, flags.Lookup(&amp;quot;debug&amp;quot;))

  flags.String(&amp;quot;addr&amp;quot;, &amp;quot;localhost:5002&amp;quot;, &amp;quot;Address of the service.&amp;quot;)
  viper.BindPFlag(&amp;quot;addr&amp;quot;, flags.Lookup(&amp;quot;addr&amp;quot;))

  flags.String(&amp;quot;smtp-addr&amp;quot;, &amp;quot;localhost:25&amp;quot;, &amp;quot;Address of the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-addr&amp;quot;, flags.Lookup(&amp;quot;smtp-addr&amp;quot;))

  flags.String(&amp;quot;smtp-user&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;User for the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-user&amp;quot;, flags.Lookup(&amp;quot;smtp-user&amp;quot;))

  flags.String(&amp;quot;smtp-password&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Password for the SMTP server.&amp;quot;)
  viper.BindPFlag(&amp;quot;smtp-password&amp;quot;, flags.Lookup(&amp;quot;smtp-password&amp;quot;))

  flags.String(&amp;quot;email-from&amp;quot;, &amp;quot;noreply@abc.com&amp;quot;, &amp;quot;The from email address.&amp;quot;)
  viper.BindPFlag(&amp;quot;email-from&amp;quot;, flags.Lookup(&amp;quot;email-from&amp;quot;))

  // Viper supports reading from yaml, toml and/or json files. Viper can
  // search multiple paths. Paths will be searched in the order they are
  // provided. Searches stopped once Config File found.

  viper.SetConfigName(&amp;quot;CommandLineCV&amp;quot;) // name of config file (without extension)

  viper.AddConfigPath(&amp;quot;/tmp&amp;quot;)
  viper.AddConfigPath(&amp;quot;.&amp;quot;)

  err := viper.ReadInConfig()
  if err != nil {
    println(&amp;quot;No config file found. Using built-in defaults.&amp;quot;)
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Done! Furthermore, the code looks really like handcrafted, instead of being automatically generated.&lt;/p&gt;

&lt;p&gt;(FTR, I used space in my Go template because the &lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/9jKexxD19Js/1hhnfmD5ckAJ&#34;&gt;tabs were giving me headaches when putting the results into automatic testing&lt;/a&gt;. You can surely use tabs in your Go template, that&amp;rsquo;s not a problem at all, I was even able to make one work for Go automatic testing. Check out the &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCV.yaml&#34;&gt;previous example&lt;/a&gt;, &lt;a href=&#34;https://github.com/suntong/easygen/blob/master/test/commandlineCV.tmpl&#34;&gt;commandlineCV&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all for today. Happy hacking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating GPT partitions easily on the command line</title>
      <link>https://suntong.github.io/blogs/2015/12/26/creating-gpt-partitions-easily-on-the-command-line</link>
      <pubDate>Sat, 26 Dec 2015 00:04:56 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2015/12/26/creating-gpt-partitions-easily-on-the-command-line</guid>
      <description>

&lt;!--
[category Tech][tags Debian,Ubuntu,Linux,partition,GPT,go,easygen,CLI]
--&gt;

&lt;h2 id=&#34;incentives:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;Incentives&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve long been enjoying using &lt;code&gt;sfdisk&lt;/code&gt; to manipulate my disk partitions. I always use it to,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xpt.sourceforge.net/techdocs/nix/disk/general/disk01-PartitionTools/index.html#cmd_sfdisk&#34;&gt;change the boot device&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xpt.sourceforge.net/techdocs/nix/disk/general/disk01-PartitionTools/index.html#save_restore_disk_partition_setting_and_fix_errors_using_sfdisk&#34;&gt;save/restore disk partition setting and fix errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;or even, &lt;a href=&#34;https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks&#34;&gt;create disk partitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When my disks are over 2T in size, I can&amp;rsquo;t use MBR and therefore can&amp;rsquo;t use &lt;code&gt;sfdisk&lt;/code&gt; anymore. I have to use GPT instead. My first GPT partitions was created using GUI tools, but I really hate GUI tools. So this time when I need to partition GPT again, I look for the command line alternative instead.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;problem&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-problem:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The problem&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a command line tool, &lt;code&gt;sgdisk&lt;/code&gt;, to create GPT partitions, but its command line interface is inhuman, if not insane. Here is the example given by the &lt;code&gt;sgdisk&lt;/code&gt; author, from &lt;a href=&#34;http://www.rodsbooks.com/gdisk/sgdisk-walkthrough.html&#34;&gt;Creating Scripts for Partition Manipulation&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
sgdisk -og $1
sgdisk -n 1:2048:4095 -c 1:&amp;quot;BIOS Boot Partition&amp;quot; -t 1:ef02 $1
sgdisk -n 2:4096:413695 -c 2:&amp;quot;EFI System Partition&amp;quot; -t 2:ef00 $1
sgdisk -n 3:413696:823295 -c 3:&amp;quot;Linux /boot&amp;quot; -t 3:8300 $1
ENDSECTOR=`sgdisk -E $1`
sgdisk -n 4:823296:$ENDSECTOR -c 4:&amp;quot;Linux LVM&amp;quot; -t 4:8e00 $1
sgdisk -p $1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the comparison, to &lt;a href=&#34;https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks&#34;&gt;create disk partitions using &lt;code&gt;sfdisk&lt;/code&gt;&lt;/a&gt;, here are two examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Three primary partitions: two of size 50MB and the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,50
,50
;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A 1MB OS2 Boot Manager partition, a 50MB DOS partition,
and three extended partitions (DOS D:, Linux swap, Linux):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,1,a
,50,6
,,E
;
,20,4
,16,S
;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, it is so simple. Coming from the simple &lt;code&gt;sfdisk&lt;/code&gt; and landed at the complicated &lt;code&gt;sgdisk&lt;/code&gt;, on looking at the above example, I realize that there is no way I can write the above &lt;code&gt;sgdisk&lt;/code&gt; code by hand, i.e., I need a tool to write it for me. Of course, the first tool that came into mind is the &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;universal code generator, easygen&lt;/a&gt;. After poking around here and there, I &lt;a href=&#34;https://github.com/suntong/easygen/commit/8b223d1f20993feb6acfde2bf40a10033eb728d5&#34;&gt;made it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;solution&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-solution:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The solution&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So to use the &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;universal code generator, easygen&lt;/a&gt; to create GPT partitions, first we need to define our partitions layout in an easy format as the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Disk: /dev/sdb

# Common Partitions Types
#
# 8300 Linux filesystem
# 8200 linux swap
# fd00 linux raid
# ef02 BIOS boot
# 0700 Microsoft basic data
#
# For more GPT Partitions Types,
# echo L | gdisk /dev/sdb

Partitions:
  - Name: bios_boot
    Type: ef02
    Size: +200M

  - Name: linux_boot
    Type: 8300
    Size: +20G

  - Name: windows
    Type: &amp;quot;0700&amp;quot;
    Size: +30G

  - Name: linux_swap
    Type: 8200
    Size: +10G

  - Name: os1
    Type: 8300
    Size: +12G

  - Name: os2
    Type: 8300
    Size: +12G

  - Name: os3
    Type: 8300
    Size: +12G

  - Name: data
    Type: 8300
    Size: &amp;quot;0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I.e., for each partition, we need to give its name, type and size. For your convenient, I&amp;rsquo;ve put the mostly used GPT types in the comment, as shown above.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the hardest part, the rest are simple and straightforward, to generate partition creation code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;easygen test/sgdisk | tee test/sgdisk.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; # format /dev/sdb as GPT, GUID Partition Table
 sgdisk -Z /dev/sdb

 sgdisk -n 0:0:+200M -t 0:ef02 -c 0:&amp;quot;bios_boot&amp;quot; /dev/sdb
 sgdisk -n 0:0:+20G -t 0:8300 -c 0:&amp;quot;linux_boot&amp;quot; /dev/sdb
 sgdisk -n 0:0:+30G -t 0:0700 -c 0:&amp;quot;windows&amp;quot; /dev/sdb
 sgdisk -n 0:0:+10G -t 0:8200 -c 0:&amp;quot;linux_swap&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os1&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os2&amp;quot; /dev/sdb
 sgdisk -n 0:0:+12G -t 0:8300 -c 0:&amp;quot;os3&amp;quot; /dev/sdb
 sgdisk -n 0:0:0 -t 0:8300 -c 0:&amp;quot;data&amp;quot; /dev/sdb

 sgdisk -p /dev/sdb

 # inform the OS of partition table changes
 partprobe /dev/sdb
 fdisk -l /dev/sdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After carefully read &lt;a href=&#34;http://www.rodsbooks.com/gdisk/sgdisk.html&#34;&gt;&lt;code&gt;sgdisk&lt;/code&gt;&amp;rsquo;s man page&lt;/a&gt;, I found it is not that insane or inhuman, but just powerful after all.&lt;/p&gt;

&lt;p&gt;The result will be exactly as we are expecting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sgdisk -p /dev/sdb
Disk /dev/sdb: 732558336 sectors, 2.7 TiB
Logical sector size: 4096 bytes
Disk identifier (GUID): C4426321-9726-4022-BB20-2EF00B490465
Partition table holds up to 128 entries
First usable sector is 6, last usable sector is 732558330
Partitions will be aligned on 256-sector boundaries
Total free space is 250 sectors (1000.0 KiB)

Number  Start (sector)    End (sector)  Size       Code  Name
   1             256           51455   200.0 MiB   EF02  bios_boot
   2           51456         5294335   20.0 GiB    8300  linux_boot
   3         5294336        13158655   30.0 GiB    0700  windows
   4        13158656        15780095   10.0 GiB    8200  linux_swap
   5        15780096        18925823   12.0 GiB    8300  os1
   6        18925824        22071551   12.0 GiB    8300  os2
   7        22071552        25217279   12.0 GiB    8300  os3
   8        25217280       732558330   2.6 TiB     8300  data

$ fdisk -l /dev/sdb

Disk /dev/sdb: 2.7 TiB, 3000558944256 bytes, 732558336 sectors
Units: sectors of 1 * 4096 = 4096 bytes
Sector size (logical/physical): 4096 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes
Disklabel type: gpt
Disk identifier: C4426321-9726-4022-BB20-2EF00B490465

Device        Start       End   Sectors  Size Type
/dev/sdb1       256     51455     51200  200M BIOS boot
/dev/sdb2     51456   5294335   5242880   20G Linux filesystem
/dev/sdb3   5294336  13158655   7864320   30G Microsoft basic data
/dev/sdb4  13158656  15780095   2621440   10G Linux swap
/dev/sdb5  15780096  18925823   3145728   12G Linux filesystem
/dev/sdb6  18925824  22071551   3145728   12G Linux filesystem
/dev/sdb7  22071552  25217279   3145728   12G Linux filesystem
/dev/sdb8  25217280 732558330 707341051  2.7T Linux filesystem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;gui_vs_cli&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;is-it-better:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;Is it better?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know most GUI lovers would laugh at my &lt;em&gt;silly&lt;/em&gt; action. I just know them so well that I can imagine exactly what the conversion would be, as follows (&lt;strong&gt;T&lt;/strong&gt; stands for &amp;ldquo;they&amp;rdquo;, whereas &lt;strong&gt;M&lt;/strong&gt; stands for me):&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;&amp;ldquo;Ha, you are making this more complicated&amp;rdquo;&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;No, I think I&amp;rsquo;m making it simpler. For example, the data definition (&lt;code&gt;.yaml&lt;/code&gt;) file not only serves the purpose of generating the partition-creation code, but also serves the purpose of documentation as well.&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;You are just kidding me, the best way to document is to take a screenshot&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;Well, I disagree. What if you want to do it again?&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;That&amp;rsquo;s so simple. I just need to find out where I store my screenshot, and I can easily redo it again&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;M&lt;/dt&gt;
&lt;dd&gt;From the GUI, doing the clicking all over again?&lt;/dd&gt;
&lt;dt&gt;T&lt;/dt&gt;
&lt;dd&gt;&lt;em&gt;Definitely. Who want to learn or use your silly way?&lt;/em&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Oh, well, my tools is definitely not for them, no matter how hard I&amp;rsquo;d like to try. I think that it is the mentality conflicting between the two camps, the Microsoft spoiled dummies, and die-hard text-everything Unix fans. Personally, I view WYSIWYG GUI tools as carving stones with chisels, and text-based/command-line tools as operating CNC machines. Yes, sure there are strict rules and steep learning curves regarding the CNC machines, but once you are over that fear and hurdle, the benefits or possibilities are endless.&lt;/p&gt;

&lt;p&gt;Talking about partition creation, let alone doing it again on a different machine, even on the same machine, I need to do it several times, because nobody can achieve the perfect score with a single shot without any prior practices. I can&amp;rsquo;t. Doing the clicking over and over again will wear me out very fast, and I most probably would end up with a less optimal setting that I&amp;rsquo;ll be regretting since. Using the &lt;code&gt;.yaml&lt;/code&gt; file and code generation, it&amp;rsquo;ll be nearly &amp;ldquo;zero cost&amp;rdquo;, I can do it over and over again until I&amp;rsquo;m fully satisfied.&lt;/p&gt;

&lt;p&gt;Let alone doing it several times, even just doing it once can be simplified by the &lt;code&gt;.yaml&lt;/code&gt; file as well. Here is a piece of my actual GPT partition definition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  - Name: os1p
    Type: 8300
    Size: +12G

  - Name: os1s
    Type: 8300
    Size: +12G

  - Name: os11
    Type: 8300
    Size: +8G

  - Name: os12
    Type: 8300
    Size: +8G

  - Name: os13
    Type: 8300
    Size: +8G

  - Name: os2p
    Type: 8300
    Size: +12G

  - Name: os2s
    Type: 8300
    Size: +12G

  - Name: os21
    Type: 8300
    Size: +8G

  - Name: os22
    Type: 8300
    Size: +8G

  - Name: os23
    Type: 8300
    Size: +8G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d like to keep a lot of OS partitions for me to try new things or keeping the old systems so that I can go back to them any time. In the above listing, I have two sets of OS partitions, &lt;code&gt;os1x&lt;/code&gt; and &lt;code&gt;os2x&lt;/code&gt;, each with two big partitions (12G), primary and secondary, and three smaller partitions (8G). Using a text editor, I can quickly duplicate the first entry into the first full set, then into both the two sets, without too much trouble. Doing from GUI, not a single chiseling I can save. Err, I meant clicking.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;advantages&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-advantages:9b45ead03ca9ede4573dfc02fa232f27&#34;&gt;The advantages&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://suntong.github.io/blogs/&#34;&gt; &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.yaml&lt;/code&gt; file and code generation will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;serve both the purpose of action and documentation.&lt;/li&gt;
&lt;li&gt;make it very simple to redo/reuse, regardless to different machines, or to the same machines; many times, or just once.&lt;/li&gt;
&lt;li&gt;give me a clearer content. Instead of the exact &lt;code&gt;sgdisk&lt;/code&gt; commands, i.e., the implementation details, the file contains only each partition&amp;rsquo;s name, type and size. Clear and straight to the point. No trivial details are in the way.&lt;/li&gt;
&lt;li&gt;of course, it also gives the benefit of coding and documenting at the same place. More reasons can be documented in the &lt;code&gt;.yaml&lt;/code&gt; file, the same way as comments make code-purpose clearer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the bonus, once the data definition (&lt;code&gt;.yaml&lt;/code&gt;) file is in place, you can do all sorts of other things you want.&lt;/p&gt;

&lt;p&gt;E.g., how about managing the mount-points?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ easygen -tf test/sgdisk-mp test/sgdisk

 mkdir /mnt/bios_boot
 mkdir /mnt/linux_boot
 mkdir /mnt/windows
 mkdir /mnt/linux_swap
 mkdir /mnt/os1
 mkdir /mnt/os2
 mkdir /mnt/os3
 mkdir /mnt/data


 mount LABEL=bios_boot /mnt/bios_boot
 mount LABEL=linux_boot /mnt/linux_boot
 mount LABEL=windows /mnt/windows
 mount LABEL=linux_swap /mnt/linux_swap
 mount LABEL=os1 /mnt/os1
 mount LABEL=os2 /mnt/os2
 mount LABEL=os3 /mnt/os3
 mount LABEL=data /mnt/data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generating the &lt;code&gt;fstab&lt;/code&gt; entries are as simple as above as well. Or, how about using &lt;code&gt;mkfs&lt;/code&gt; to format each partition? Simple as well.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;&lt;a href=&#34;http://suntong.github.io/blogs/2016/01/01/easygen---easy-to-use-universal-code/text-generator/&#34;&gt;ll explain more&lt;/a&gt; on &lt;a href=&#34;https://github.com/suntong/easygen&#34;&gt;the easy to use universal code/text generator easygen&lt;/a&gt; next. Meanwhile, you can check out what we have &lt;a href=&#34;https://github.com/suntong001/blog/blob/master/GoOptP7-easygen.md&#34;&gt;covered&lt;/a&gt; already  &lt;a href=&#34;https://sfxpt.wordpress.com/2015/07/04/easygen-is-now-coding-itself/&#34;&gt;before&lt;/a&gt;, including &lt;a href=&#34;https://sfxpt.wordpress.com/2015/07/10/easygen-for-mock-up/&#34;&gt;mock-up generation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use sfdisk to partition disks</title>
      <link>https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks</link>
      <pubDate>Fri, 25 Dec 2015 16:32:39 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2015/12/25/use-sfdisk-to-partition-disks</guid>
      <description>

&lt;!--
[category Tech][tags Debian,Ubuntu,Linux,partition,CLI]
--&gt;

&lt;p&gt;I&amp;rsquo;ve long been enjoying using &lt;code&gt;sfdisk&lt;/code&gt; to manipulate my disk partitions, especially for creating disk partitions.&lt;/p&gt;

&lt;p&gt;Creating disk partitions with &lt;code&gt;sfdisk&lt;/code&gt; is super easy. The followings are the notes I jotted down back in the old days when HD were still called &lt;code&gt;hda&lt;/code&gt; instead of &lt;code&gt;sda&lt;/code&gt;. Replace &lt;code&gt;hdX&lt;/code&gt; with &lt;code&gt;sdX&lt;/code&gt;, and everything are still as good as new, as far as MBR type of disks are concerned.&lt;/p&gt;

&lt;p&gt;Input lines have fields &lt;code&gt;&amp;lt;start&amp;gt;,&amp;lt;size&amp;gt;,&amp;lt;type&amp;gt;&lt;/code&gt;&amp;hellip; - see sfdisk.8.
&lt;code&gt;sfdisk&lt;/code&gt; reads lines of the form&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;          &amp;lt;start&amp;gt; &amp;lt;size&amp;gt; &amp;lt;id&amp;gt; &amp;lt;bootable&amp;gt; &amp;lt;c,h,s&amp;gt; &amp;lt;c,h,s&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Usually no &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is given, and input lines start with a comma.&lt;/p&gt;

&lt;h2 id=&#34;example-1:d2003266fecc98ef045cd536251823f1&#34;&gt;Example 1&lt;/h2&gt;

&lt;p&gt;1) One big partition:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda &amp;lt;&amp;lt; EOF
;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;;&#39; | sfdisk /dev/sdc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(If there was garbage on the disk before, you may get error messages
like: &lt;code&gt;ERROR: sector 0 does not have an msdos signature&lt;/code&gt;
and &lt;code&gt;/dev/hda: unrecognized partition&lt;/code&gt;. This does not matter
if you write an entirely fresh partition table anyway.)&lt;/p&gt;

&lt;p&gt;The output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Old situation:
...
New situation:
Units = cylinders of 208896 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+   1023    1024-   208895+  83  Linux native
Successfully wrote the new partition table
  hda: hda1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing and rereading the partition table takes a few seconds -
don&amp;rsquo;t be alarmed if nothing happens for six seconds or so.&lt;/p&gt;

&lt;p&gt;To create a single &amp;ldquo;W95 FAT32 (LBA)&amp;rdquo; partition, try:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;,,c;&#39; | sfdisk /dev/sdd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-2:d2003266fecc98ef045cd536251823f1&#34;&gt;Example 2&lt;/h2&gt;

&lt;p&gt;2) Three primary partitions: two of size 50MB and the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,50
,50
;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;New situation:
Units = megabytes of 1048576 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start   End     MB   #blocks   Id  System
/dev/hda1         0+    50-    51-    51203+  83  Linux native
/dev/hda2        50+   100-    51-    51204   83  Linux native
/dev/hda3       100+   203    104-   106488   83  Linux native
Successfully wrote the new partition table
  hda: hda1 hda2 hda3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/dev/hda1&lt;/code&gt; is one block (in fact only half a block) shorter than
&lt;code&gt;/dev/hda2&lt;/code&gt; because its start had to be shifted away from zero in
order to leave room for the Master Boot Record (MBR).&lt;/p&gt;

&lt;h2 id=&#34;example-3:d2003266fecc98ef045cd536251823f1&#34;&gt;Example 3&lt;/h2&gt;

&lt;p&gt;3) A 1MB OS2 Boot Manager partition, a 50MB DOS partition,
   and three extended partitions (DOS D:, Linux swap, Linux):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sfdisk /dev/hda -uM &amp;lt;&amp;lt; EOF
,1,a
,50,6
,,E
;
,20,4
,16,S
;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Device Boot Start   End     MB   #blocks   Id  System
/dev/hda1         0+     1-     2-     1223+   a  OS/2 Boot Manager
/dev/hda2         1+    51-    51-    51204    6  DOS 16-bit FAT &amp;gt;=32M
/dev/hda3        51+   203    153-   156468    5  Extended
/dev/hda4         0      -      0         0    0  Empty
/dev/hda5        51+    71-    21-    20603+   4  DOS 16-bit FAT &amp;lt;32M
/dev/hda6        71+    87-    17-    16523+  82  Linux swap
/dev/hda7        87+   203    117-   119339+  83  Linux native
Successfully wrote the new partition table
  hda: hda1 hda2 hda3 &amp;lt; hda5 hda6 hda7 &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these rounded numbers look better in cylinder units:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sfdisk -l /dev/hda
   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
/dev/hda2          6     256     251     51204    6  DOS 16-bit FAT &amp;gt;=32M
/dev/hda3        257    1023     767    156468    5  Extended
/dev/hda4          0       -       0         0    0  Empty
/dev/hda5        257+    357     101-    20603+   4  DOS 16-bit FAT &amp;lt;32M
/dev/hda6        358+    438      81-    16523+  82  Linux swap
/dev/hda7        439+   1023     585-   119339+  83  Linux native
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;explanations:d2003266fecc98ef045cd536251823f1&#34;&gt;Explanations&lt;/h2&gt;

&lt;p&gt;But still - why does /dev/hda5 not start on a cylinder boundary?
Because it is contained in an extended partition that does.
Of the chain of extended partitions, usually only the first is
shown. (The others have no name under Linux anyway.) But
these additional extended partitions can be made visible:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sfdisk -l -x /dev/hda
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;   Device Boot Start     End   #cyls   #blocks   Id  System
/dev/hda1          0+      5       6-     1223+   a  OS/2 Boot Manager
/dev/hda2          6     256     251     51204    6  DOS 16-bit FAT &amp;gt;=32M
/dev/hda3        257    1023     767    156468    5  Extended
/dev/hda4          0       -       0         0    0  Empty

/dev/hda5        257+    357     101-    20603+   4  DOS 16-bit FAT &amp;lt;32M
    -            358    1023     666    135864    5  Extended
    -            257     256       0         0    0  Empty
    -            257     256       0         0    0  Empty

/dev/hda6        358+    438      81-    16523+  82  Linux swap
    -            439    1023     585    119340    5  Extended
    -            358     357       0         0    0  Empty
    -            358     357       0         0    0  Empty

/dev/hda7        439+   1023     585-   119339+  83  Linux native
    -            439     438       0         0    0  Empty
    -            439     438       0         0    0  Empty
    -            439     438       0         0    0  Empty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why the empty 4th input line? The description of the extended partitions
starts after that of the four primary partitions.
You force an empty partition with a &amp;ldquo;,0&amp;rdquo; input line, but here all
space was divided already, so the fourth partition became empty
automatically.&lt;/p&gt;

&lt;p&gt;How did I know about 4,6,a,E,S? Well, &lt;strong&gt;E,S,L&lt;/strong&gt; stand for &lt;em&gt;Extended&lt;/em&gt;,
&lt;em&gt;Swap&lt;/em&gt; and &lt;em&gt;Linux&lt;/em&gt;. The other values are hexadecimal and come from
the table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sfdisk -T
Id  Name

 0  Empty
 1  DOS 12-bit FAT
 2  XENIX root
 3  XENIX usr
 4  DOS 16-bit FAT &amp;lt;32M
 5  Extended
 6  DOS 16-bit FAT &amp;gt;=32M
 7  OS/2 HPFS or QNX or Advanced UNIX
 8  AIX data
 9  AIX boot or Coherent
 a  OS/2 Boot Manager
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ref:&lt;/p&gt;

&lt;p&gt;/usr/share/doc/util-linux/examples/sfdisk.examples.gz&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wp2Hugo</title>
      <link>https://suntong.github.io/blogs/2015/12/06/wp2hugo</link>
      <pubDate>Sun, 06 Dec 2015 09:26:47 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2015/12/06/wp2hugo</guid>
      <description>

&lt;h2 id=&#34;introduction:8a55f438c7f68ff2aceb1734b9746f11&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Wp2Hugo converts wordpress&amp;rsquo;s markdown meta data format into Hugo&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;E.g., for an input of wordpress&amp;rsquo;s markdown like this,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Dbab From Start To Finish

[category Tech][tags Debian,Ubuntu,Linux,DHCP,DNS,WPAD,dnsmasq,dbab]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output Hugo&amp;rsquo;s meta data is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Dbab From Start To Finish&amp;quot;
date: &amp;quot;2015-12-06T09:57:45-05:00&amp;quot;
categories: [&amp;quot;Tech&amp;quot;]
tags: [&amp;quot;Debian&amp;quot;,&amp;quot;Ubuntu&amp;quot;,&amp;quot;Linux&amp;quot;,&amp;quot;DHCP&amp;quot;,&amp;quot;DNS&amp;quot;,&amp;quot;WPAD&amp;quot;,&amp;quot;dnsmasq&amp;quot;,&amp;quot;dbab&amp;quot;]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usage:8a55f438c7f68ff2aceb1734b9746f11&#34;&gt;Usage&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Wp2Hugo &amp;lt; wordpress.md &amp;gt; path/to/hugo.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;discussion:8a55f438c7f68ff2aceb1734b9746f11&#34;&gt;Discussion&lt;/h2&gt;

&lt;p&gt;The metadata section in Hugo is called &lt;a href=&#34;https://gohugo.io/content/front-matter/&#34;&gt;frontmatter&lt;/a&gt;.  it &lt;em&gt;&amp;ldquo;supports a few different formats&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;each with their own identifying tokens&amp;rdquo;&lt;/em&gt;. What Icarus template uses is the TOML format, identified by &lt;code&gt;&#39;+++&#39;&lt;/code&gt;, and &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;what hugo tutorials&lt;/a&gt; uses is YAML format, identified by &lt;code&gt;&#39;---&#39;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of meta data in TOML format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
title = &amp;quot;Dbab From Start To Finish&amp;quot;
date = &amp;quot;2015-12-05T23:29:19-05:00&amp;quot;
categories = [&amp;quot;Tech&amp;quot;]
tags = [&amp;quot;Debian&amp;quot;,&amp;quot;Ubuntu&amp;quot;,&amp;quot;Linux&amp;quot;,&amp;quot;DHCP&amp;quot;,&amp;quot;DNS&amp;quot;,&amp;quot;WPAD&amp;quot;,&amp;quot;dnsmasq&amp;quot;,&amp;quot;dbab&amp;quot;]
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Github apparently doesn&amp;rsquo;t understand the TOML format, so it just shows them as a &lt;a href=&#34;https://github.com/suntong/blogs/blob/a2b128fafed6b0b3062de9ee4405705c26425bd5/content/post/Wp2Hugo.md&#34;&gt;long line of ugly strings&lt;/a&gt;; yet it understands the YAML format, and &lt;a href=&#34;https://github.com/suntong/blogs/blob/master/content/post/Wp2Hugo.md&#34;&gt;present it nicely as a table &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;source:8a55f438c7f68ff2aceb1734b9746f11&#34;&gt;Source&lt;/h2&gt;

&lt;p&gt;Update: I&amp;rsquo;ve switched over from the original TOML format to YAML format after the initial post, so that my .md &lt;em&gt;source&lt;/em&gt; will look good on Github as well. The following code is just to demonstrate the &lt;code&gt;gist&lt;/code&gt; &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; so it is still converting to the TOML format. You can find the &lt;a href=&#34;https://github.com/suntong/lang/blob/master/lang/Go/src/text/awk/Wp2Hugo.go&#34;&gt;latest Wp2Hugo code here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BTW, hope Hugo can add such &lt;code&gt;github&lt;/code&gt; code into their &lt;a href=&#34;http://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; support as well, since it will literally the same as the &lt;code&gt;gist&lt;/code&gt; shortcode.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/suntong/0268a39d18bf3e684ff9.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>An exhibit of Markdown</title>
      <link>https://suntong.github.io/blogs/2015/12/02/an-exhibit-of-markdown</link>
      <pubDate>Wed, 02 Dec 2015 23:21:16 -0500</pubDate>
      
      <guid>https://suntong.github.io/blogs/2015/12/02/an-exhibit-of-markdown</guid>
      <description>

&lt;p&gt;This note demonstrates some of what wordpress Markdown is capable of doing.&lt;/p&gt;

&lt;h2 id=&#34;references:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.markitdown.net/markdown&#34;&gt;http://www.markitdown.net/markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.support.wordpress.com/markdown-quick-reference/&#34;&gt;http://en.support.wordpress.com/markdown-quick-reference/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;markdown-quick-reference-for-wordpress:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Markdown quick reference for wordpress&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://en.support.wordpress.com/markdown-quick-reference/&#34;&gt;http://en.support.wordpress.com/markdown-quick-reference/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Special shortcodes can be embedded in &lt;a href=&#34;http://en.support.wordpress.com/post-by-email/&#34;&gt;email&lt;/a&gt; to configure the published post, e.g., &lt;code&gt;[more]&lt;/code&gt;, &lt;code&gt;[delay +1 hour]&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Emphasize&lt;/em&gt; &lt;em&gt;emphasize&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Strong&lt;/strong&gt; &lt;strong&gt;Strong&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;http://example.com&#34; title=&#34;Title&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some text with &lt;a href=&#34;http://www.markitdown.net/&#34;&gt;a link&lt;/a&gt; and another &lt;a href=&#34;http://example.org/&#34; title=&#34;Title&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Images Inline-style:
&lt;img src=&#34;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&#34; alt=&#34;alt text&#34; title=&#34;Logo Title Text 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Linked Images:
&lt;a href=&#34;http://wordpress.com/&#34; title=&#34;Title&#34;&gt;&lt;img src=&#34;http://s.wordpress.org/about/images/wpmini-grey.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Footnotes: I have more&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3014366c1e65c1cf3609cb177e3dcea8:http-www-markitdown-net&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3014366c1e65c1cf3609cb177e3dcea8:http-www-markitdown-net&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to say up here.&lt;/p&gt;

&lt;p&gt;Lists&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Item&lt;/li&gt;
&lt;li&gt;Item

&lt;ul&gt;
&lt;li&gt;Mixed 1&lt;/li&gt;
&lt;li&gt;Mixed 1

&lt;ul&gt;
&lt;li&gt;Mixed 2&lt;/li&gt;
&lt;li&gt;Mixed 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Or minuses

&lt;ul&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Item&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Break it apart.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list nicely aligned but not properly rendered

&lt;ul&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list properly rendered

&lt;ul&gt;
&lt;li&gt;Mixed 1&lt;/li&gt;
&lt;li&gt;Mixed 1

&lt;ul&gt;
&lt;li&gt;Mixed 2&lt;/li&gt;
&lt;li&gt;Mixed 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Or minuses

&lt;ul&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Back to level one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preformatted&lt;/p&gt;

&lt;p&gt;Begin each line with
  two spaces or more to
  make text look
  e x a c t l y
  like  you  type i
  t.&lt;/p&gt;

&lt;p&gt;Code block&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;#button {
	border: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://en.support.wordpress.com/code/posting-source-code/&#34;&gt;http://en.support.wordpress.com/code/posting-source-code/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following languages are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;actionscript3&lt;/li&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;clojure&lt;/li&gt;
&lt;li&gt;coldfusion&lt;/li&gt;
&lt;li&gt;cpp&lt;/li&gt;
&lt;li&gt;csharp&lt;/li&gt;
&lt;li&gt;css&lt;/li&gt;
&lt;li&gt;delphi&lt;/li&gt;
&lt;li&gt;erlang&lt;/li&gt;
&lt;li&gt;fsharp&lt;/li&gt;
&lt;li&gt;diff&lt;/li&gt;
&lt;li&gt;groovy&lt;/li&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;li&gt;javascript&lt;/li&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;javafx&lt;/li&gt;
&lt;li&gt;matlab (keywords only)&lt;/li&gt;
&lt;li&gt;objc&lt;/li&gt;
&lt;li&gt;perl&lt;/li&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;powershell&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;r&lt;/li&gt;
&lt;li&gt;ruby&lt;/li&gt;
&lt;li&gt;scala&lt;/li&gt;
&lt;li&gt;sql&lt;/li&gt;
&lt;li&gt;vb&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definition Lists&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;WordPress&lt;/dt&gt;
&lt;dd&gt;A semantic personal publishing platform&lt;/dd&gt;
&lt;dt&gt;Markdown&lt;/dt&gt;
&lt;dd&gt;Text-to-HTML conversion tool&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Abbreviations&lt;/p&gt;

&lt;p&gt;Markdown converts text to HTML.&lt;/p&gt;

&lt;p&gt;*[HTML]: HyperText Markup Language
Definitions can be anywhere in the document&lt;/p&gt;

&lt;h2 id=&#34;more-markdown-examples-from-pandoc-markdown-http-johnmacfarlane-net-pandoc-readme-html-pandocs-markdown:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;More Markdown Examples from &lt;a href=&#34;http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown&#34;&gt;Pandoc-Markdown&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.unexpected-vortices.com/sw/rippledoc/quick-markdown-example.html&#34;&gt;http://www.unexpected-vortices.com/sw/rippledoc/quick-markdown-example.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use 3 dashes for &amp;mdash; an em-dash. Use 2 dashes for ranges (ex., &amp;ldquo;it&amp;rsquo;s all
in chapters 12&amp;ndash;14&amp;rdquo;). Three dots &amp;hellip; will be converted to an ellipsis.
Unicode is supported.&lt;/p&gt;

&lt;p&gt;Inline math equations go in like so: $\omega = d\phi / dt$. Display
math should get its own line and be put in in double-dollarsigns:&lt;/p&gt;

&lt;p&gt;$$I = \int \rho R^{2} dV$$&lt;/p&gt;

&lt;p&gt;And note that you can backslash-escape any punctuation characters
which you wish to be displayed literally, ex.: `foo`, *bar*, etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Block quotes are
written like so.&lt;/p&gt;

&lt;p&gt;They can span multiple paragraphs,
if you like.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s a &amp;ldquo;line block&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;| Line one
|   Line too
| Line tree&lt;/p&gt;

&lt;p&gt;Tables can look like this:&lt;/p&gt;

&lt;p&gt;size  material      color&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;9     leather       brown
10    hemp canvas   natural
11    glass         transparent&lt;/p&gt;

&lt;p&gt;Table: Shoes, their sizes, and what they&amp;rsquo;re made of&lt;/p&gt;

&lt;p&gt;(The above is the caption for the table.) Pandoc also supports
multi-line tables:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;keyword   text&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;red       Sunsets, apples, and
          other red or reddish
          things.&lt;/p&gt;

&lt;p&gt;green     Leaves, grass, frogs
          and other things it&amp;rsquo;s
          not easy being.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;[nextpage]&lt;/p&gt;

&lt;h2 id=&#34;emphasis:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Emphasis&lt;/h2&gt;

&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Strong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Combined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Strikethrough uses two tildes. &lt;del&gt;Scratch this.&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&#34;lists:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Lists&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;First ordered list item&lt;/li&gt;
&lt;li&gt;Another item

&lt;ul&gt;
&lt;li&gt;Unordered sub-list.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Actual numbers don&amp;rsquo;t matter, just that it&amp;rsquo;s a number

&lt;ol&gt;
&lt;li&gt;Ordered sub-list&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;And another item.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&amp;rsquo;ll use three here to also align the raw Markdown).&lt;/p&gt;

&lt;p&gt;To have a line break without a paragraph, you will need to use two trailing spaces.&lt;br /&gt;
   Note that this line is separate, but within the same paragraph.&lt;br /&gt;
   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
&lt;li&gt;Or minuses&lt;/li&gt;
&lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;urls:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;URLs&lt;/h2&gt;

&lt;p&gt;URLs can be made in a handful of ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com&#34;&gt;http://github.com&lt;/a&gt; - automatic!&lt;/li&gt;
&lt;li&gt;A named link to &lt;a href=&#34;http://www.markitdown.net/&#34;&gt;MarkItDown&lt;/a&gt;. The easiest way to do these is to select what you want to make a link and hit &lt;code&gt;Ctrl+L&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Another named link to &lt;a href=&#34;http://www.markitdown.net/&#34;&gt;MarkItDown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some text to show that the reference links can follow later.&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;internal&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;internal-links-named-anchors:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;internal links / named anchors&lt;/h3&gt;

&lt;p&gt;For Markdown&amp;rsquo;s support for internal links / named anchors,&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2822089/how-to-link-to-part-of-the-same-document-in-markdown/6494918#6494918&#34;&gt;http://stackoverflow.com/questions/2822089/how-to-link-to-part-of-the-same-document-in-markdown/6494918#6494918&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;obvious solution is to place your own anchor point in the page wherever you like, thus:&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;abcde&#34;/&gt;
before the line you want to &amp;lsquo;link&amp;rsquo; to. Don&amp;rsquo;t forget the quotation marks around it. Then a markdown link like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;#abcde&#34;&gt;link text&lt;/a&gt;
anywhere in the document takes you there.&lt;/p&gt;

&lt;p&gt;It might be OK to put the &lt;a href=&#34;#internal&#34;&gt;anchor in the heading line&lt;/a&gt; you wish to link.&lt;/p&gt;

&lt;h2 id=&#34;images:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Images&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s our logo (hover to see the title text):&lt;/p&gt;

&lt;p&gt;Inline-style:
&lt;img src=&#34;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&#34; alt=&#34;alt text&#34; title=&#34;Logo Title Text 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Linked Images:
&lt;a href=&#34;http://wordpress.com/&#34; title=&#34;Title&#34;&gt;&lt;img src=&#34;http://s.wordpress.org/about/images/wpmini-grey.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reference-style:
&lt;img src=&#34;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&#34; alt=&#34;alt text&#34; title=&#34;Logo Title Text 2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;code-and-syntax-highlighting:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Code and Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;Code blocks are part of the Markdown spec, but syntax highlighting isn&amp;rsquo;t. However, many renderers &amp;ndash; like Github&amp;rsquo;s and Markdown Here &amp;ndash; support syntax highlighting.&lt;/p&gt;

&lt;p&gt;Inline &lt;code&gt;code&lt;/code&gt; has &lt;code&gt;back-ticks around&lt;/code&gt; it.&lt;/p&gt;

&lt;h3 id=&#34;code-blocks:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;code blocks&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Code blocks are very useful for developers and other people who look at code or other things that are written in plain text. As you can see, it uses a fixed-width font.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blocks of code are either fenced by lines with three back-ticks ```, or are indented with four spaces. I recommend only using the fenced code blocks &amp;ndash; they&amp;rsquo;re easier and only they support syntax highlighting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var s = &amp;quot;JavaScript syntax highlighting&amp;quot;;
alert(s);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = &amp;quot;Python syntax highlighting&amp;quot;
print s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;No language indicated, so no syntax highlighting. 
But let&#39;s throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;blockquotes:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Blockquotes&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quote break.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very long line that will still be quoted properly when it wraps. Oh boy let&amp;rsquo;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can &lt;em&gt;put&lt;/em&gt; &lt;strong&gt;Markdown&lt;/strong&gt; into a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;inline-html:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Inline HTML&lt;/h2&gt;

&lt;p&gt;You can also use raw HTML in your Markdown, and it&amp;rsquo;ll mostly work pretty well.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Definition list&lt;/dt&gt;
  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;

  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;
  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h1 id=&#34;headings-h1-can-also-contain-formatting:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;Headings - H1,  &lt;em&gt;can&lt;/em&gt; also contain &lt;strong&gt;formatting&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;There are six levels of headings. They correspond with the six levels of HTML headings.&lt;/p&gt;

&lt;h2 id=&#34;h2:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;H2&lt;/h2&gt;

&lt;h3 id=&#34;h3:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;H3&lt;/h3&gt;

&lt;h4 id=&#34;h4:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;H4&lt;/h4&gt;

&lt;h5 id=&#34;h5:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;H5&lt;/h5&gt;

&lt;h6 id=&#34;h6:3014366c1e65c1cf3609cb177e3dcea8&#34;&gt;H6&lt;/h6&gt;

&lt;p&gt;[end]&lt;/p&gt;

&lt;p&gt;everything after this shortcode is ignored (i.e. signatures). Make sure it&amp;rsquo;s on its own line with a blank line above it.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:3014366c1e65c1cf3609cb177e3dcea8:http-www-markitdown-net&#34;&gt; &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3014366c1e65c1cf3609cb177e3dcea8:http-www-markitdown-net&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>